proc iml;

free BICARMA;
free AICARMA;
free AICcARMA;
free SICARMA;
free SICcARMA;
free FPEARMA;
free HQARMA;
free AICUARMA;

free BICAR;
free AICAR;
free AICcAR;
free SICAR;
free SICcAR;
free FPEAR;
free HQAR;
free AICUAR;

free BICMA;
free AICMA;
free AICcMA;
free SICMA;
free SICcMA;
free FPEMA;
free HQMA;
free AICUMA;

free phiuse;
free thetause;

h=10000;
n=50;

/*Methode estimation MCO*/ 
Do rep=1 to h;

/*coef tiré aléatoirement pour arma 2*2*/
u=RAND('UNIFORM',0.01,0.499); /*prends entre -1 et 0.2 car max 0.2*4<1*/
v=RAND('UNIFORM',0.01,0.499);
z=RAND('UNIFORM',0.01,0.999);
o=RAND('UNIFORM',0.1,0.99);
un=1;
phi=un||u||v;
phiuse=phiuse//phi;
theta=un||z;
thetause=thetause//theta;


/*simulation vraie arma*/
y=ARMASIM(phi,theta,0,0.5,n,2);
ysimu=ysimu||y;

/*simulation faux MA */
do q=1 to 4;
p=0;
x=normal(j(50,1,1));
free X1;
do i=1 to q;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X1=X1||S*Y;
end;
beta=inv(X1[q+1:nrow(X1),]`*X1[q+1:nrow(X1),])*X1[q+1:nrow(X1),]`*Y[q+1:nrow(X1),];
resid=Y-X1*beta;
free X3;
do i=1 to q;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X3=X3||S*resid;
end;
a=max(p,q);
beta=inv(X3[a+1:nrow(X3),]`*X3[a+1:nrow(X3),])*X3[a+1:nrow(X3),]`*Y[a+1:nrow(Y)];
resid=Y[a+1:nrow(X3)]-X3[a+1:nrow(X3),]*beta;
dfe=nrow(X3)-ncol(X3); 
sygma2=(resid`*resid)/nrow(resid);
varpar=sygma2*inv(X3[a+1:nrow(X3),]`*X3[a+1:nrow(X3),]);
var=vecdiag(sygma2*inv(X3[a+1:nrow(X3),]`*X3[a+1:nrow(X3),])); 
tstat=beta/sqrt(var);
pvalue=(1-probT(abs(tstat),dfe))*2;
resu=beta||sqrt(var)||tstat||pvalue;
AIC=log(sygma2)+2*(p+q)/nrow(resid);
AICMA=AICMA//AIC;
AICc=log(sygma2)+2*(p+q)/nrow(resid)+(nrow(resid)+(p+q))/(nrow(resid)-p-q-2);
AICcMA=AICcMA//AICc;
SIC=log(sygma2)+log(nrow(resid))*(p+q)/nrow(resid);
SICMA=SICMA//SIC;
SICc=log(sygma2)+log(nrow(resid))*(p+q)/(nrow(resid)-p-q-2);
SICcMA=SICcMA//SICc;
HQ=log(sygma2)+(2*nrow(resid)**(-1)*(p+q))*log(log(nrow(resid)));
HQMA=HQMA//HQ;
FPE=sygma2*(nrow(resid)-(p+q))**(-1)*nrow(resid)*(p+q);
FPEMA=FPEMA//FPE;
BIC=log(sygma2)+((p+q)*log(nrow(resid)))/nrow(resid);
BICMA=BICMA//BIC;
AICU=log(sygma2)/(nrow(resid)-(p+q))+(nrow(resid)+p+q)/(nrow(resid)-p-q-2);
AICUMA=AICUMA//AICU;
end;

/*simulation faux AR*/
do p=1 to 4;
q=0;
x=normal(j(50,1,1));
free X1;
do i=1 to p;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X1=X1||S*Y;
end;
beta=inv(X1[p+1:nrow(X1),]`*X1[p+1:nrow(X1),])*X1[p+1:nrow(X1),]`*Y[p+1:nrow(X1),];
resid=Y-X1*beta;
free X2;
do i=1 to p;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X2=X2||S*Y;
end;
a=max(p,q);
beta=inv(X2[a+1:nrow(X2),]`*X2[a+1:nrow(X2),])*X2[a+1:nrow(X2),]`*Y[a+1:nrow(Y)];
resid=Y[a+1:nrow(X2)]-X2[a+1:nrow(X2),]*beta;
dfe=nrow(X2)-ncol(X2); 
sygma2=(resid`*resid)/nrow(resid);
varpar=sygma2*inv(X2[a+1:nrow(X2),]`*X2[a+1:nrow(X2),]);
var=vecdiag(sygma2*inv(X2[a+1:nrow(X2),]`*X2[a+1:nrow(X2),])); 
tstat=beta/sqrt(var);
pvalue=(1-probT(abs(tstat),dfe))*2;
resu=beta||sqrt(var)||tstat||pvalue;
AIC=log(sygma2)+2*(p+q)/nrow(resid);
AICAR=AICAR//AIC;
AICc=log(sygma2)+2*(p+q)/nrow(resid)+(nrow(resid)+(p+q))/(nrow(resid)-p-q-2);
AICcAR=AICcAR//AICc;
SIC=log(sygma2)+log(nrow(resid))*(p+q)/nrow(resid);
SICAR=SICAR//SIC;
SICc=log(sygma2)+log(nrow(resid))*(p+q)/(nrow(resid)-p-q-2);
SICcAR=SICcAR//SICc;
HQ=log(sygma2)+(2*nrow(resid)**(-1)*(p+q))*log(log(nrow(resid)));
HQAR=HQAR//HQ;
FPE=sygma2*(nrow(resid)-(p+q))**(-1)*nrow(resid)*(p+q);
FPEAR=FPEAR//FPE;
BIC=log(sygma2)+((p+q)*log(nrow(resid)))/nrow(resid);
BICAR=BICAR//BIC;
AICU=log(sygma2)/(nrow(resid)-(p+q))+(nrow(resid)+p+q)/(nrow(resid)-p-q-2);
AICUAR=AICUAR//AICU;
end;

/*simulation faux arma*/
do p=1 to 2;
do q=1 to 2;
p1=p+q;
x=normal(j(50,1,1));
free X1;
do i=1 to p1;
S=j(nrow(y),nrow(y),0);/*S : matrice de séléction*/
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X1=X1||S*Y;/*fonction lag*/
end;
beta=inv(X1[p1+1:nrow(X1),]`*X1[p1+1:nrow(X1),])*X1[p1+1:nrow(X1),]`*Y[p1+1:nrow(X1),];
resid=Y-X1*beta;/*estimateur des eps*/
free X2;
do i=1 to p;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X2=X2||S*Y;/*fonction lag*/
end;
free X3;
do i=1 to q;
S=j(nrow(y),nrow(y),0);
Id=I(nrow(y)-i);
S[1+i:nrow(Y),1:nrow(Y)-i]=Id;
X3=X3||S*resid;/*fonction lag*/
end;
X4=X2||X3;
a=max(p1,p,q);
beta=inv(X4[a+1:nrow(X4),]`*X4[a+1:nrow(X4),])*X4[a+1:nrow(X4),]`*Y[a+1:nrow(Y)];
resid=Y[a+1:nrow(X4)]-X4[a+1:nrow(X4),]*beta;
dfe=nrow(X4)-ncol(X4); /*degré de liberté*/
sygma2=(resid`*resid)/nrow(resid);
varpar=sygma2*inv(X4[a+1:nrow(X4),]`*X4[a+1:nrow(X4),]);/*matrice de varcov*/
var=vecdiag(sygma2*inv(X4[a+1:nrow(X4),]`*X4[a+1:nrow(X4),])); /* matrice de variance*/
tstat=beta/sqrt(var);
pvalue=(1-probT(abs(tstat),dfe))*2;
resu=beta||sqrt(var)||tstat||pvalue;
AIC=log(sygma2)+2*(p+q)/nrow(resid);
AICARMA=AICARMA//AIC;
AICc=log(sygma2)+2*(p+q)/nrow(resid)+(nrow(resid)+(p+q))/(nrow(resid)-p-q-2);
AICcARMA=AICcARMA//AICc;
SIC=log(sygma2)+log(nrow(resid))*(p+q)/nrow(resid);
SICARMA=SICARMA//SIC;
SICc=log(sygma2)+log(nrow(resid))*(p+q)/(nrow(resid)-p-q-2);
SICcARMA=SICcARMA//SICc;
HQ=log(sygma2)+(2*nrow(resid)**(-1)*(p+q))*log(log(nrow(resid)));
HQARMA=HQARMA//HQ;
FPE=sygma2*(nrow(resid)-(p+q))**(-1)*nrow(resid)*(p+q);
FPEARMA=FPEARMA//FPE;
BIC=log(sygma2)+((p+q)*log(nrow(resid)))/nrow(resid);
BICARMA=BICARMA//BIC;
AICU=log(sygma2)/(nrow(resid)-(p+q))+(nrow(resid)+p+q)/(nrow(resid)-p-q-2);
AICUARMA=AICUARMA//AICU;
end;
end;

end;


create estim2215 var {AICAR AICcAR SICAR SICcAR HQAR FPEAR BICAR AICUAR AICMA AICcMA SICMA SICcMA HQMA FPEMA BICMA AICUMA AICARMA AICcARMA SICARMA SICcARMA HQARMA FPEARMA BICARMA AICUARMA};
append;
close;
create coeffthetavraiearma2215 from thetause;
append from thetause;
close;
create coeffphivraiearma2215 from phiuse;
append from phiuse;
close;
create ysimu2215 from ysimu;
append from ysimu;
close;
submit;
DATA ysimu2215 ;
    SET ysimu2215 (RENAME = (col1-col10000 = y1-y10000)) ;
 RUN ;
 quit;
endsubmit;

/*Methode estimation MV*/
use ysimu2215;
read all;
close ysimu2215;

/*Estime AR*/
free matar;
free p;
free aicarmv;
free aiccarmv;
free sicarmv;
free siccarmv;
free hqarmv;
free fpearmv;
free bicarmv;
do i=1 to h;
do j=1 to 4;
submit i j;
proc arima data=ysimu2215 plots=none;
identify var=y&i noprint;
estimate p=&j q=0 outest=tab noprint;
run;
endsubmit;
use tab;
read all;
close tab;
matar=matar//Errorvar[1];
p=p//j;
end;
end;
do i=1 to nrow(p);
AICAR=log(matar[i])+2*(p[i])/n;
AICARMV=AICARMV//AICAR;
AICcAR=log(matar[i])+2*(p[i])/n+(n+(p[i]))/(n-p[i]-2);
AICcARMV=AICcARMV//AICcAR;
SICAR=log(matar[i])+log(n)*(p[i])/n;
SICARMV=SICARMV//SICAR;
SICcAR=log(matar[i])+log(n)*(p[i])/(n-p[i]-2);
SICcARMV=SICcARMV//SICcAR;
HQAR=log(matar[i])+(2*n**(-1)*(p[i]))*log(log(n));
HQARMV=HQARMV//HQAR;
FPEAR=matar[i]*(n-(p[i]))**(-1)*n*(p[i]);
FPEARMV=FPEARMV//FPEAR;
BICAR=log(matar[i])+((p[i])*log(n))/n;
BICARMV=BICARMV//BICAR;
AICUAR=(log(matar[i])/(n-(p[i])))+(n+p[i])/(n-p[i]-2);
AICUARMV=AICUARMV//AICUAR;
end;

/*Estime MA*/
free matma;
free q;
free aicmamv;
free aiccmamv;
free sicmamv;
free siccmamv;
free hqmamv;
free fpemamv;
free bicmamv;
do i=1 to h;
do j=1 to 4;
submit i j;
proc arima data=ysimu2215 plots=none;
identify var=y&i noprint;
estimate p=0 q=&j outest=tab noprint;
run;
endsubmit;
use tab;
read all;
close tab;
matma=matma//Errorvar[1];
q=q//j;
end;
end;
do i=1 to nrow(q);
AICMA=log(matma[i])+2*(q[i])/n;
AICMAMV=AICMAMV//AICMA;
AICcMA=log(matma[i])+2*(q[i])/n+(n+(q[i]))/(n-q[i]-2);
AICcMAMV=AICcMAMV//AICcMA;
SICMA=log(matma[i])+log(n)*(q[i])/n;
SICMAMV=SICMAMV//SICMA;
SICcMA=log(matma[i])+log(n)*(q[i])/(n-q[i]-2);
SICcMAMV=SICcMAMV//SICcMA;
HQMA=log(matma[i])+(2*n**(-1)*(q[i]))*log(log(n));
HQMAMV=HQMAMV//HQMA;
FPEMA=matma[i]*(n-(q[i]))**(-1)*n*(q[i]);
FPEMAMV=FPEMAMV//FPEMA;
BICMA=log(matma[i])+((q[i])*log(n))/n;
BICMAMV=BICMAMV//BICMA;
AICUMA=(log(matma[i])/(n-(q[i])))+(n+q[i])/(n-q[i]-2);
AICUMAMV=AICUMAMV//AICUMA;
end;

/*Estime ARMA*/
free matarma;
free pm;
free qm;
free aicarmamv;
free aiccarmamv;
free sicarmamv;
free siccarmamv;
free hqarmamv;
free fpearmamv;
free bicarmamv;
do i=1 to h;
do k=1 to 2;
do j=1 to 2;
submit i j k;
proc arima data=ysimu2215 plots=none;
identify var=y&i noprint;
estimate p=&k q=&j maxiter=200 outest=tab noprint;
run;
endsubmit;
use tab;
read all;
close tab;
matarma=matarma//Errorvar[1];
pm=pm//k;
qm=qm//j;
end;
end;
end;
do i=1 to nrow(pm);
AICARMA=log(matarma[i])+2*(pm[i]+qm[i])/n;
AICARMAMV=AICARMAMV//AICARMA;
AICcARMA=log(matarma[i])+2*(pm[i]+qm[i])/n+(n+(pm[i]+qm[i]))/(n-pm[i]-qm[i]-2);
AICcARMAMV=AICcARMAMV//AICcARMA;
SICARMA=log(matarma[i])+log(n)*(pm[i]+qm[i])/n;
SICARMAMV=SICARMAMV//SICARMA;
SICcARMA=log(matarma[i])+log(n)*(pm[i]+qm[i])/(n-pm[i]-qm[i]-2);
SICcARMAMV=SICcARMAMV//SICcARMA;
HQARMA=log(matarma[i])+(2*n**(-1)*(pm[i]+qm[i]))*log(log(n));
HQARMAMV=HQARMAMV//HQARMA;
FPEARMA=matarma[i]*(n-(pm[i]+qm[i]))**(-1)*n*(pm[i]+qm[i]);
FPEARMAMV=FPEARMAMV//FPEARMA;
BICARMA=log(matarma[i])+((pm[i]+qm[i])*log(n))/n;
BICARMAMV=BICARMAMV//BICARMA;
AICUARMA=(log(matarma[i])/(n-(p[i]+q[i])))+(n+p[i]+q[i])/(n-p[i]-q[i]-2);
AICUARMAMV=AICUARMAMV//AICUARMA;
end;

create estimMV2215 var {AICARMV AICcARMV SICARMV SICcARMV HQARMV FPEARMV BICARMV AICUARMV AICMAMV AICcMAMV SICMAMV SICcMAMV HQMAMV FPEMAMV BICMAMV AICUMAMV AICARMAMV AICcARMAMV SICARMAMV SICcARMAMV HQARMAMV FPEARMAMV BICARMAMV AICUARMAMV};
append;
close;

/*count min*/
use estimMV2215;
read all;
close estimMV2215;

submit;
data teststimMV2215; set estimMV2215;
if aicarmv="" then delete;
if aiccarmv="" then delete;
if sicarmv="" then delete;
if siccarmv="" then delete;
if hqarmv="" then delete;
if fpearmv="" then delete;
if aicuarmv="" then delete;
if aicmamv="" then delete;
if aiccmamv="" then delete;
if sicmamv="" then delete;
if siccmamv="" then delete;
if hqmamv="" then delete;
if fpemamv="" then delete;
if aicumamv="" then delete;
if aicarmamv="" then delete;
if aiccarmamv="" then delete;
if sicarmamv="" then delete;
if siccarmamv="" then delete;
if hqarmamv="" then delete;
if fpearmamv="" then delete;
if aicuarmamv="" then delete;
run;
endsubmit;

use teststimMV2215;
read all;
close teststimMV2215;

use estim2215;
read all;
close estim2215;

/*count aic*/
free aic11;
free aic10;
free aic01;
free aic12;
free aic20;
free aic02;
free aic21;
free aic30;
free aic03;
free aic22;
free aic40;
free aic04;
free aic11mv;
free aic10mv;
free aic01mv;
free aic12mv;
free aic20mv;
free aic02mv;
free aic21mv;
free aic30mv;
free aic03mv;
free aic22vmv;
free aic40mv;
free aic04mv;

do o=1 to h*4 by 4;
fr=aicarma[o];
aic11=aic11//fr;
gr=aicar[o];
aic10=aic10//gr;
hr=aicma[o];
aic01=aic01//hr;
end;

do o=1 to h*4 by 4;
frr=aicarmamv[o];
aic11mv=aic11mv//frr;
grr=aicarmv[o];
aic10mv=aic10mv//grr;
hrr=aicmamv[o];
aic01mv=aic01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=aicarma[l];
aic12=aic12//sr;
ar=aicar[l];
aic20=aic20//ar;
zr=aicma[l];
aic02=aic02//zr;
end;

do l=2 to h*4 by 4;
srr=aicarmamv[l];
aic12mv=aic12mv//srr;
arr=aicarmv[l];
aic20mv=aic20mv//arr;
zrr=aicmamv[l];
aic02mv=aic02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=aicarma[t];
aic21=aic21//mr;
rr=aicar[t];
aic30=aic30//rr;
kr=aicma[t];
aic03=aic03//kr;
end;


do t=3 to h*4 by 4;
mrr=aicarmamv[t];
aic21mv=aic21mv//mrr;
rrr=aicarmv[t];
aic30mv=aic30mv//rrr;
krr=aicmamv[t];
aic03mv=aic03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=aicarma[g];
aic22v=aic22v//jvraie;
dr=aicar[g];
aic40=aic40//dr;
br=aicma[g];
aic04=aic04//br;
end;

do g=4 to h*4 by 4;
jvraier=aicarmamv[g];
aic22vmv=aic22vmv//jvraier;
drr=aicarmv[g];
aic40mv=aic40mv//drr;
brr=aicmamv[g];
aic04mv=aic04mv//brr;
end;


countaicar1=0;
countaicar2=0;
countaicar3=0;
countaicar4=0;
countaicma1=0;
countaicma2=0;
countaicma3=0;
countaicma4=0;
countaicarma11=0;
countaicarma12=0;
countaicarma21=0;
countaicarma22=0;
countaicar1mv=0;
countaicar2mv=0;
countaicar3mv=0;
countaicar4mv=0;
countaicma1mv=0;
countaicma2mv=0;
countaicma3mv=0;
countaicma4mv=0;
countaicarma11mv=0;
countaicarma12mv=0;
countaicarma21mv=0;
countaicarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(aic04);
cmv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
dmv[ini]=min(aic11mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
emv[ini]=min(aic10mv[ini],aic11mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
qmv[ini]=min(aic10mv[ini],aic01mv[ini],aic11mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
imv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic11mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
xmv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic11mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
pomv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic11mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
pcmv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic11mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
pamv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic11mv[ini],aic22vmv[ini],aic40mv[ini],aic04mv[ini]);
pimv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic11mv[ini],aic40mv[ini],aic04mv[ini]);
uimv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic11mv[ini],aic04mv[ini]);
momv[ini]=min(aic10mv[ini],aic01mv[ini],aic12mv[ini],aic20mv[ini],aic02mv[ini],aic21mv[ini],aic30mv[ini],aic03mv[ini],aic22vmv[ini],aic40mv[ini],aic11mv[ini]);
if aic11mv[ini]<cmv[ini] then ctaicarma11mv=1;
else ctaicarma11mv=0;
countaicarma11mv=countaicarma11mv+ctaicarma11mv;
if aic10mv[ini]<dmv[ini] then ctaicar1mv=1;
else ctaicar1mv=0;
countaicar1mv=countaicar1mv+ctaicar1mv;
if aic01mv[ini]<emv[ini] then ctaicma1mv=1;
else ctaicma1mv=0;
countaicma1mv=countaicma1mv+ctaicma1mv;
if aic12mv[ini]<qmv[ini] then ctaicarma12mv=1;
else ctaicarma12mv=0;
countaicarma12mv=countaicarma12mv+ctaicarma12mv=1;
if aic20mv[ini]<imv[ini] then ctaicar2mv=1;
else ctaicar2mv=0;
countaicar2mv=countaicar2mv+ctaicar2mv;
if aic02mv[ini]<xmv[ini] then ctaicma2mv=1;
else ctaicma2mv=0;
countaicma2mv=countaicma2mv+ctaicma2mv;
if aic21mv[ini]<pomv[ini] then ctaicarma21mv=1;
else ctaicarma21mv=0;
countaicarma21mv=countaicarma21mv+ctaicarma21mv;
if aic30mv[ini]<pcmv[ini] then ctaicar3mv=1;
else ctaicar3mv=0;
countaicar3mv=countaicar3mv+ctaicar3mv;
if aic03mv[ini]<pamv[ini] then ctaicma3mv=1;
else ctaicma3mv=0;
countaicma3mv=countaicma3mv+ctaicma3mv;
if aic22vmv[ini]<pimv[ini] then ctaicarma22mv=1;
else ctaicarma22mv=0;
countaicarma22mv=countaicarma22mv+ctaicarma22mv;
if aic40mv[ini]<uimv[ini] then ctaicar4mv=1;
else ctaicar4mv=0;
countaicar4mv=countaicar4mv+ctaicar4mv;
if aic04mv[ini]<momv[ini] then ctaicma4mv=1;
else ctaicma4mv=0;
countaicma4mv=countaicma4mv+ctaicma4mv; 
end;

do ini=1 to nrow(aic04);
c[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
d[ini]=min(aic11[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
e[ini]=min(aic10[ini],aic11[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
q[ini]=min(aic10[ini],aic01[ini],aic11[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
i[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic11[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
x[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic11[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
po[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic11[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
pc[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic11[ini],aic03[ini],aic22v[ini],aic40[ini],aic04[ini]);
pa[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic11[ini],aic22v[ini],aic40[ini],aic04[ini]);
pi[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic11[ini],aic40[ini],aic04[ini]);
ui[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic11[ini],aic04[ini]);
mo[ini]=min(aic10[ini],aic01[ini],aic12[ini],aic20[ini],aic02[ini],aic21[ini],aic30[ini],aic03[ini],aic22v[ini],aic40[ini],aic11[ini]);
if aic11[ini]<c[ini] then ctaicarma11=1;
else ctaicarma11=0;
countaicarma11=countaicarma11+ctaicarma11;
if aic10[ini]<d[ini] then ctaicar1=1;
else ctaicar1=0;
countaicar1=countaicar1+ctaicar1;
if aic01[ini]<e[ini] then ctaicma1=1;
else ctaicma1=0;
countaicma1=countaicma1+ctaicma1;
if aic12[ini]<q[ini] then ctaicarma12=1;
else ctaicarma12=0;
countaicarma12=countaicarma12+ctaicarma12=1;
if aic20[ini]<i[ini] then ctaicar2=1;
else ctaicar2=0;
countaicar2=countaicar2+ctaicar2;
if aic02[ini]<x[ini] then ctaicma2=1;
else ctaicma2=0;
countaicma2=countaicma2+ctaicma2;
if aic21[ini]<po[ini] then ctaicarma21=1;
else ctaicarma21=0;
countaicarma21=countaicarma21+ctaicarma21;
if aic30[ini]<pc[ini] then ctaicar3=1;
else ctaicar3=0;
countaicar3=countaicar3+ctaicar3;
if aic03[ini]<pa[ini] then ctaicma3=1;
else ctaicma3=0;
countaicma3=countaicma3+ctaicma3;
if aic22v[ini]<pi[ini] then ctaicarma22=1;
else ctaicarma22=0;
countaicarma22=countaicarma22+ctaicarma22;
if aic40[ini]<ui[ini] then ctaicar4=1;
else ctaicar4=0;
countaicar4=countaicar4+ctaicar4;
if aic04[ini]<mo[ini] then ctaicma4=1;
else ctaicma4=0;
countaicma4=countaicma4+ctaicma4;  
end;

create countaicmco22 var {n countaicar1 countaicar2 countaicar3 countaicar4 countaicma1 countaicma2 countaicma3 countaicma4 countaicarma11 countaicarma12 countaicarma21 countaicarma22};
append;
close;

create countaicmv22 var {n countaicar1mv countaicar2mv countaicar3mv countaicar4mv countaicma1mv countaicma2mv countaicma3mv countaicma4mv countaicarma11mv countaicarma12mv countaicarma21mv countaicarma22mv};
append;
close;

/*count aicc*/
free aicc11;
free aicc10;
free aicc01;
free aicc12;
free aicc20;
free aicc02;
free aicc21;
free aicc30;
free aicc03;
free aicc22;
free aicc40;
free aicc04;
free aicc11mv;
free aicc10mv;
free aicc01mv;
free aicc12mv;
free aicc20mv;
free aicc02mv;
free aicc21mv;
free aicc30mv;
free aicc03mv;
free aicc22vmv;
free aicc40mv;
free aicc04mv;

do o=1 to h*4 by 4;
fr=aiccarma[o];
aicc11=aicc11//fr;
gr=aiccar[o];
aicc10=aicc10//gr;
hr=aiccma[o];
aicc01=aicc01//hr;
end;

do o=1 to h*4 by 4;
frr=aiccarmamv[o];
aicc11mv=aicc11mv//frr;
grr=aiccarmv[o];
aicc10mv=aicc10mv//grr;
hrr=aiccmamv[o];
aicc01mv=aicc01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=aiccarma[l];
aicc12=aicc12//sr;
ar=aiccar[l];
aicc20=aicc20//ar;
zr=aiccma[l];
aicc02=aicc02//zr;
end;

do l=2 to h*4 by 4;
srr=aiccarmamv[l];
aicc12mv=aicc12mv//srr;
arr=aiccarmv[l];
aicc20mv=aicc20mv//arr;
zrr=aiccmamv[l];
aicc02mv=aicc02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=aiccarma[t];
aicc21=aicc21//mr;
rr=aiccar[t];
aicc30=aicc30//rr;
kr=aiccma[t];
aicc03=aicc03//kr;
end;


do t=3 to h*4 by 4;
mrr=aiccarmamv[t];
aicc21mv=aicc21mv//mrr;
rrr=aiccarmv[t];
aicc30mv=aicc30mv//rrr;
krr=aiccmamv[t];
aicc03mv=aicc03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=aiccarma[g];
aicc22v=aicc22v//jvraie;
dr=aiccar[g];
aicc40=aicc40//dr;
br=aiccma[g];
aicc04=aicc04//br;
end;

do g=4 to h*4 by 4;
jvraier=aiccarmamv[g];
aicc22vmv=aicc22vmv//jvraier;
drr=aiccarmv[g];
aicc40mv=aicc40mv//drr;
brr=aiccmamv[g];
aicc04mv=aicc04mv//brr;
end;


countaiccar1=0;
countaiccar2=0;
countaiccar3=0;
countaiccar4=0;
countaiccma1=0;
countaiccma2=0;
countaiccma3=0;
countaiccma4=0;
countaiccarma11=0;
countaiccarma12=0;
countaiccarma21=0;
countaiccarma22=0;
countaiccar1mv=0;
countaiccar2mv=0;
countaiccar3mv=0;
countaiccar4mv=0;
countaiccma1mv=0;
countaiccma2mv=0;
countaiccma3mv=0;
countaiccma4mv=0;
countaiccarma11mv=0;
countaiccarma12mv=0;
countaiccarma21mv=0;
countaiccarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(aicc04);
cmv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
dmv[ini]=min(aicc11mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
emv[ini]=min(aicc10mv[ini],aicc11mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
qmv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc11mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
imv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc11mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
xmv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc11mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
pomv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc11mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
pcmv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc11mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
pamv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc11mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc04mv[ini]);
pimv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc11mv[ini],aicc40mv[ini],aicc04mv[ini]);
uimv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc11mv[ini],aicc04mv[ini]);
momv[ini]=min(aicc10mv[ini],aicc01mv[ini],aicc12mv[ini],aicc20mv[ini],aicc02mv[ini],aicc21mv[ini],aicc30mv[ini],aicc03mv[ini],aicc22vmv[ini],aicc40mv[ini],aicc11mv[ini]);
if aicc11mv[ini]<cmv[ini] then ctaiccarma11mv=1;
else ctaiccarma11mv=0;
countaiccarma11mv=countaiccarma11mv+ctaiccarma11mv;
if aicc10mv[ini]<dmv[ini] then ctaiccar1mv=1;
else ctaiccar1mv=0;
countaiccar1mv=countaiccar1mv+ctaiccar1mv;
if aicc01mv[ini]<emv[ini] then ctaiccma1mv=1;
else ctaiccma1mv=0;
countaiccma1mv=countaiccma1mv+ctaiccma1mv;
if aicc12mv[ini]<qmv[ini] then ctaiccarma12mv=1;
else ctaiccarma12mv=0;
countaiccarma12mv=countaiccarma12mv+ctaiccarma12mv=1;
if aicc20mv[ini]<imv[ini] then ctaiccar2mv=1;
else ctaiccar2mv=0;
countaiccar2mv=countaiccar2mv+ctaiccar2mv;
if aicc02mv[ini]<xmv[ini] then ctaiccma2mv=1;
else ctaiccma2mv=0;
countaiccma2mv=countaiccma2mv+ctaiccma2mv;
if aicc21mv[ini]<pomv[ini] then ctaiccarma21mv=1;
else ctaiccarma21mv=0;
countaiccarma21mv=countaiccarma21mv+ctaiccarma21mv;
if aicc30mv[ini]<pcmv[ini] then ctaiccar3mv=1;
else ctaiccar3mv=0;
countaiccar3mv=countaiccar3mv+ctaiccar3mv;
if aicc03mv[ini]<pamv[ini] then ctaiccma3mv=1;
else ctaiccma3mv=0;
countaiccma3mv=countaiccma3mv+ctaiccma3mv;
if aicc22vmv[ini]<pimv[ini] then ctaiccarma22mv=1;
else ctaiccarma22mv=0;
countaiccarma22mv=countaiccarma22mv+ctaiccarma22mv;
if aicc40mv[ini]<uimv[ini] then ctaiccar4mv=1;
else ctaiccar4mv=0;
countaiccar4mv=countaiccar4mv+ctaiccar4mv;
if aicc04mv[ini]<momv[ini] then ctaiccma4mv=1;
else ctaiccma4mv=0;
countaiccma4mv=countaiccma4mv+ctaiccma4mv; 
end;

do ini=1 to nrow(aicc04);
c[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
d[ini]=min(aicc11[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
e[ini]=min(aicc10[ini],aicc11[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
q[ini]=min(aicc10[ini],aicc01[ini],aicc11[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
i[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc11[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
x[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc11[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
po[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc11[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
pc[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc11[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
pa[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc11[ini],aicc22v[ini],aicc40[ini],aicc04[ini]);
pi[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc11[ini],aicc40[ini],aicc04[ini]);
ui[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc11[ini],aicc04[ini]);
mo[ini]=min(aicc10[ini],aicc01[ini],aicc12[ini],aicc20[ini],aicc02[ini],aicc21[ini],aicc30[ini],aicc03[ini],aicc22v[ini],aicc40[ini],aicc11[ini]);
if aicc11[ini]<c[ini] then ctaiccarma11=1;
else ctaiccarma11=0;
countaiccarma11=countaiccarma11+ctaiccarma11;
if aicc10[ini]<d[ini] then ctaiccar1=1;
else ctaiccar1=0;
countaiccar1=countaiccar1+ctaiccar1;
if aicc01[ini]<e[ini] then ctaiccma1=1;
else ctaiccma1=0;
countaiccma1=countaiccma1+ctaiccma1;
if aicc12[ini]<q[ini] then ctaiccarma12=1;
else ctaiccarma12=0;
countaiccarma12=countaiccarma12+ctaiccarma12=1;
if aicc20[ini]<i[ini] then ctaiccar2=1;
else ctaiccar2=0;
countaiccar2=countaiccar2+ctaiccar2;
if aicc02[ini]<x[ini] then ctaiccma2=1;
else ctaiccma2=0;
countaiccma2=countaiccma2+ctaiccma2;
if aicc21[ini]<po[ini] then ctaiccarma21=1;
else ctaiccarma21=0;
countaiccarma21=countaiccarma21+ctaiccarma21;
if aicc30[ini]<pc[ini] then ctaiccar3=1;
else ctaiccar3=0;
countaiccar3=countaiccar3+ctaiccar3;
if aicc03[ini]<pa[ini] then ctaiccma3=1;
else ctaiccma3=0;
countaiccma3=countaiccma3+ctaiccma3;
if aicc22v[ini]<pi[ini] then ctaiccarma22=1;
else ctaiccarma22=0;
countaiccarma22=countaiccarma22+ctaiccarma22;
if aicc40[ini]<ui[ini] then ctaiccar4=1;
else ctaiccar4=0;
countaiccar4=countaiccar4+ctaiccar4;
if aicc04[ini]<mo[ini] then ctaiccma4=1;
else ctaiccma4=0;
countaiccma4=countaiccma4+ctaiccma4;  
end;

create countaiccmco22 var {n countaiccar1 countaiccar2 countaiccar3 countaiccar4 countaiccma1 countaiccma2 countaiccma3 countaiccma4 countaiccarma11 countaiccarma12 countaiccarma21 countaiccarma22};
append;
close;

create countaiccmv22 var {n countaiccar1mv countaiccar2mv countaiccar3mv countaiccar4mv countaiccma1mv countaiccma2mv countaiccma3mv countaiccma4mv countaiccarma11mv countaiccarma12mv countaiccarma21mv countaiccarma22mv};
append;
close;

/*count sic*/
free sic11;
free sic10;
free sic01;
free sic12;
free sic20;
free sic02;
free sic21;
free sic30;
free sic03;
free sic22;
free sic40;
free sic04;
free sic11mv;
free sic10mv;
free sic01mv;
free sic12mv;
free sic20mv;
free sic02mv;
free sic21mv;
free sic30mv;
free sic03mv;
free sic22vmv;
free sic40mv;
free sic04mv;

do o=1 to h*4 by 4;
fr=sicarma[o];
sic11=sic11//fr;
gr=sicar[o];
sic10=sic10//gr;
hr=sicma[o];
sic01=sic01//hr;
end;

do o=1 to h*4 by 4;
frr=sicarmamv[o];
sic11mv=sic11mv//frr;
grr=sicarmv[o];
sic10mv=sic10mv//grr;
hrr=sicmamv[o];
sic01mv=sic01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=sicarma[l];
sic12=sic12//sr;
ar=sicar[l];
sic20=sic20//ar;
zr=sicma[l];
sic02=sic02//zr;
end;

do l=2 to h*4 by 4;
srr=sicarmamv[l];
sic12mv=sic12mv//srr;
arr=sicarmv[l];
sic20mv=sic20mv//arr;
zrr=sicmamv[l];
sic02mv=sic02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=sicarma[t];
sic21=sic21//mr;
rr=sicar[t];
sic30=sic30//rr;
kr=sicma[t];
sic03=sic03//kr;
end;


do t=3 to h*4 by 4;
mrr=sicarmamv[t];
sic21mv=sic21mv//mrr;
rrr=sicarmv[t];
sic30mv=sic30mv//rrr;
krr=sicmamv[t];
sic03mv=sic03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=sicarma[g];
sic22v=sic22v//jvraie;
dr=sicar[g];
sic40=sic40//dr;
br=sicma[g];
sic04=sic04//br;
end;

do g=4 to h*4 by 4;
jvraier=sicarmamv[g];
sic22vmv=sic22vmv//jvraier;
drr=sicarmv[g];
sic40mv=sic40mv//drr;
brr=sicmamv[g];
sic04mv=sic04mv//brr;
end;


countsicar1=0;
countsicar2=0;
countsicar3=0;
countsicar4=0;
countsicma1=0;
countsicma2=0;
countsicma3=0;
countsicma4=0;
countsicarma11=0;
countsicarma12=0;
countsicarma21=0;
countsicarma22=0;
countsicar1mv=0;
countsicar2mv=0;
countsicar3mv=0;
countsicar4mv=0;
countsicma1mv=0;
countsicma2mv=0;
countsicma3mv=0;
countsicma4mv=0;
countsicarma11mv=0;
countsicarma12mv=0;
countsicarma21mv=0;
countsicarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(sic04);
cmv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
dmv[ini]=min(sic11mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
emv[ini]=min(sic10mv[ini],sic11mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
qmv[ini]=min(sic10mv[ini],sic01mv[ini],sic11mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
imv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic11mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
xmv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic11mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
pomv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic11mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
pcmv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic11mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
pamv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic11mv[ini],sic22vmv[ini],sic40mv[ini],sic04mv[ini]);
pimv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic11mv[ini],sic40mv[ini],sic04mv[ini]);
uimv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic11mv[ini],sic04mv[ini]);
momv[ini]=min(sic10mv[ini],sic01mv[ini],sic12mv[ini],sic20mv[ini],sic02mv[ini],sic21mv[ini],sic30mv[ini],sic03mv[ini],sic22vmv[ini],sic40mv[ini],sic11mv[ini]);
if sic11mv[ini]<cmv[ini] then ctsicarma11mv=1;
else ctsicarma11mv=0;
countsicarma11mv=countsicarma11mv+ctsicarma11mv;
if sic10mv[ini]<dmv[ini] then ctsicar1mv=1;
else ctsicar1mv=0;
countsicar1mv=countsicar1mv+ctsicar1mv;
if sic01mv[ini]<emv[ini] then ctsicma1mv=1;
else ctsicma1mv=0;
countsicma1mv=countsicma1mv+ctsicma1mv;
if sic12mv[ini]<qmv[ini] then ctsicarma12mv=1;
else ctsicarma12mv=0;
countsicarma12mv=countsicarma12mv+ctsicarma12mv=1;
if sic20mv[ini]<imv[ini] then ctsicar2mv=1;
else ctsicar2mv=0;
countsicar2mv=countsicar2mv+ctsicar2mv;
if sic02mv[ini]<xmv[ini] then ctsicma2mv=1;
else ctsicma2mv=0;
countsicma2mv=countsicma2mv+ctsicma2mv;
if sic21mv[ini]<pomv[ini] then ctsicarma21mv=1;
else ctsicarma21mv=0;
countsicarma21mv=countsicarma21mv+ctsicarma21mv;
if sic30mv[ini]<pcmv[ini] then ctsicar3mv=1;
else ctsicar3mv=0;
countsicar3mv=countsicar3mv+ctsicar3mv;
if sic03mv[ini]<pamv[ini] then ctsicma3mv=1;
else ctsicma3mv=0;
countsicma3mv=countsicma3mv+ctsicma3mv;
if sic22vmv[ini]<pimv[ini] then ctsicarma22mv=1;
else ctsicarma22mv=0;
countsicarma22mv=countsicarma22mv+ctsicarma22mv;
if sic40mv[ini]<uimv[ini] then ctsicar4mv=1;
else ctsicar4mv=0;
countsicar4mv=countsicar4mv+ctsicar4mv;
if sic04mv[ini]<momv[ini] then ctsicma4mv=1;
else ctsicma4mv=0;
countsicma4mv=countsicma4mv+ctsicma4mv; 
end;

do ini=1 to nrow(sic04);
c[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
d[ini]=min(sic11[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
e[ini]=min(sic10[ini],sic11[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
q[ini]=min(sic10[ini],sic01[ini],sic11[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
i[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic11[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
x[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic11[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
po[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic11[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
pc[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic11[ini],sic03[ini],sic22v[ini],sic40[ini],sic04[ini]);
pa[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic11[ini],sic22v[ini],sic40[ini],sic04[ini]);
pi[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic11[ini],sic40[ini],sic04[ini]);
ui[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic11[ini],sic04[ini]);
mo[ini]=min(sic10[ini],sic01[ini],sic12[ini],sic20[ini],sic02[ini],sic21[ini],sic30[ini],sic03[ini],sic22v[ini],sic40[ini],sic11[ini]);
if sic11[ini]<c[ini] then ctsicarma11=1;
else ctsicarma11=0;
countsicarma11=countsicarma11+ctsicarma11;
if sic10[ini]<d[ini] then ctsicar1=1;
else ctsicar1=0;
countsicar1=countsicar1+ctsicar1;
if sic01[ini]<e[ini] then ctsicma1=1;
else ctsicma1=0;
countsicma1=countsicma1+ctsicma1;
if sic12[ini]<q[ini] then ctsicarma12=1;
else ctsicarma12=0;
countsicarma12=countsicarma12+ctsicarma12=1;
if sic20[ini]<i[ini] then ctsicar2=1;
else ctsicar2=0;
countsicar2=countsicar2+ctsicar2;
if sic02[ini]<x[ini] then ctsicma2=1;
else ctsicma2=0;
countsicma2=countsicma2+ctsicma2;
if sic21[ini]<po[ini] then ctsicarma21=1;
else ctsicarma21=0;
countsicarma21=countsicarma21+ctsicarma21;
if sic30[ini]<pc[ini] then ctsicar3=1;
else ctsicar3=0;
countsicar3=countsicar3+ctsicar3;
if sic03[ini]<pa[ini] then ctsicma3=1;
else ctsicma3=0;
countsicma3=countsicma3+ctsicma3;
if sic22v[ini]<pi[ini] then ctsicarma22=1;
else ctsicarma22=0;
countsicarma22=countsicarma22+ctsicarma22;
if sic40[ini]<ui[ini] then ctsicar4=1;
else ctsicar4=0;
countsicar4=countsicar4+ctsicar4;
if sic04[ini]<mo[ini] then ctsicma4=1;
else ctsicma4=0;
countsicma4=countsicma4+ctsicma4;  
end;

create countsicmco22 var {n countsicar1 countsicar2 countsicar3 countsicar4 countsicma1 countsicma2 countsicma3 countsicma4 countsicarma11 countsicarma12 countsicarma21 countsicarma22};
append;
close;

create countsicmv22 var {n countsicar1mv countsicar2mv countsicar3mv countsicar4mv countsicma1mv countsicma2mv countsicma3mv countsicma4mv countsicarma11mv countsicarma12mv countsicarma21mv countsicarma22mv};
append;
close;

/*count sicc*/
free sicc11;
free sicc10;
free sicc01;
free sicc12;
free sicc20;
free sicc02;
free sicc21;
free sicc30;
free sicc03;
free sicc22;
free sicc40;
free sicc04;
free sicc11mv;
free sicc10mv;
free sicc01mv;
free sicc12mv;
free sicc20mv;
free sicc02mv;
free sicc21mv;
free sicc30mv;
free sicc03mv;
free sicc22vmv;
free sicc40mv;
free sicc04mv;

do o=1 to h*4 by 4;
fr=siccarma[o];
sicc11=sicc11//fr;
gr=siccar[o];
sicc10=sicc10//gr;
hr=siccma[o];
sicc01=sicc01//hr;
end;

do o=1 to h*4 by 4;
frr=siccarmamv[o];
sicc11mv=sicc11mv//frr;
grr=siccarmv[o];
sicc10mv=sicc10mv//grr;
hrr=siccmamv[o];
sicc01mv=sicc01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=siccarma[l];
sicc12=sicc12//sr;
ar=siccar[l];
sicc20=sicc20//ar;
zr=siccma[l];
sicc02=sicc02//zr;
end;

do l=2 to h*4 by 4;
srr=siccarmamv[l];
sicc12mv=sicc12mv//srr;
arr=siccarmv[l];
sicc20mv=sicc20mv//arr;
zrr=siccmamv[l];
sicc02mv=sicc02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=siccarma[t];
sicc21=sicc21//mr;
rr=siccar[t];
sicc30=sicc30//rr;
kr=siccma[t];
sicc03=sicc03//kr;
end;


do t=3 to h*4 by 4;
mrr=siccarmamv[t];
sicc21mv=sicc21mv//mrr;
rrr=siccarmv[t];
sicc30mv=sicc30mv//rrr;
krr=siccmamv[t];
sicc03mv=sicc03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=siccarma[g];
sicc22v=sicc22v//jvraie;
dr=siccar[g];
sicc40=sicc40//dr;
br=siccma[g];
sicc04=sicc04//br;
end;

do g=4 to h*4 by 4;
jvraier=siccarmamv[g];
sicc22vmv=sicc22vmv//jvraier;
drr=siccarmv[g];
sicc40mv=sicc40mv//drr;
brr=siccmamv[g];
sicc04mv=sicc04mv//brr;
end;


countsiccar1=0;
countsiccar2=0;
countsiccar3=0;
countsiccar4=0;
countsiccma1=0;
countsiccma2=0;
countsiccma3=0;
countsiccma4=0;
countsiccarma11=0;
countsiccarma12=0;
countsiccarma21=0;
countsiccarma22=0;
countsiccar1mv=0;
countsiccar2mv=0;
countsiccar3mv=0;
countsiccar4mv=0;
countsiccma1mv=0;
countsiccma2mv=0;
countsiccma3mv=0;
countsiccma4mv=0;
countsiccarma11mv=0;
countsiccarma12mv=0;
countsiccarma21mv=0;
countsiccarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(sicc04);
cmv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
dmv[ini]=min(sicc11mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
emv[ini]=min(sicc10mv[ini],sicc11mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
qmv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc11mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
imv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc11mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
xmv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc11mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
pomv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc11mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
pcmv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc11mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
pamv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc11mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc04mv[ini]);
pimv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc11mv[ini],sicc40mv[ini],sicc04mv[ini]);
uimv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc11mv[ini],sicc04mv[ini]);
momv[ini]=min(sicc10mv[ini],sicc01mv[ini],sicc12mv[ini],sicc20mv[ini],sicc02mv[ini],sicc21mv[ini],sicc30mv[ini],sicc03mv[ini],sicc22vmv[ini],sicc40mv[ini],sicc11mv[ini]);
if sicc11mv[ini]<cmv[ini] then ctsiccarma11mv=1;
else ctsiccarma11mv=0;
countsiccarma11mv=countsiccarma11mv+ctsiccarma11mv;
if sicc10mv[ini]<dmv[ini] then ctsiccar1mv=1;
else ctsiccar1mv=0;
countsiccar1mv=countsiccar1mv+ctsiccar1mv;
if sicc01mv[ini]<emv[ini] then ctsiccma1mv=1;
else ctsiccma1mv=0;
countsiccma1mv=countsiccma1mv+ctsiccma1mv;
if sicc12mv[ini]<qmv[ini] then ctsiccarma12mv=1;
else ctsiccarma12mv=0;
countsiccarma12mv=countsiccarma12mv+ctsiccarma12mv=1;
if sicc20mv[ini]<imv[ini] then ctsiccar2mv=1;
else ctsiccar2mv=0;
countsiccar2mv=countsiccar2mv+ctsiccar2mv;
if sicc02mv[ini]<xmv[ini] then ctsiccma2mv=1;
else ctsiccma2mv=0;
countsiccma2mv=countsiccma2mv+ctsiccma2mv;
if sicc21mv[ini]<pomv[ini] then ctsiccarma21mv=1;
else ctsiccarma21mv=0;
countsiccarma21mv=countsiccarma21mv+ctsiccarma21mv;
if sicc30mv[ini]<pcmv[ini] then ctsiccar3mv=1;
else ctsiccar3mv=0;
countsiccar3mv=countsiccar3mv+ctsiccar3mv;
if sicc03mv[ini]<pamv[ini] then ctsiccma3mv=1;
else ctsiccma3mv=0;
countsiccma3mv=countsiccma3mv+ctsiccma3mv;
if sicc22vmv[ini]<pimv[ini] then ctsiccarma22mv=1;
else ctsiccarma22mv=0;
countsiccarma22mv=countsiccarma22mv+ctsiccarma22mv;
if sicc40mv[ini]<uimv[ini] then ctsiccar4mv=1;
else ctsiccar4mv=0;
countsiccar4mv=countsiccar4mv+ctsiccar4mv;
if sicc04mv[ini]<momv[ini] then ctsiccma4mv=1;
else ctsiccma4mv=0;
countsiccma4mv=countsiccma4mv+ctsiccma4mv; 
end;

do ini=1 to nrow(sicc04);
c[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
d[ini]=min(sicc11[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
e[ini]=min(sicc10[ini],sicc11[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
q[ini]=min(sicc10[ini],sicc01[ini],sicc11[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
i[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc11[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
x[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc11[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
po[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc11[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
pc[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc11[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
pa[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc11[ini],sicc22v[ini],sicc40[ini],sicc04[ini]);
pi[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc11[ini],sicc40[ini],sicc04[ini]);
ui[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc11[ini],sicc04[ini]);
mo[ini]=min(sicc10[ini],sicc01[ini],sicc12[ini],sicc20[ini],sicc02[ini],sicc21[ini],sicc30[ini],sicc03[ini],sicc22v[ini],sicc40[ini],sicc11[ini]);
if sicc11[ini]<c[ini] then ctsiccarma11=1;
else ctsiccarma11=0;
countsiccarma11=countsiccarma11+ctsiccarma11;
if sicc10[ini]<d[ini] then ctsiccar1=1;
else ctsiccar1=0;
countsiccar1=countsiccar1+ctsiccar1;
if sicc01[ini]<e[ini] then ctsiccma1=1;
else ctsiccma1=0;
countsiccma1=countsiccma1+ctsiccma1;
if sicc12[ini]<q[ini] then ctsiccarma12=1;
else ctsiccarma12=0;
countsiccarma12=countsiccarma12+ctsiccarma12=1;
if sicc20[ini]<i[ini] then ctsiccar2=1;
else ctsiccar2=0;
countsiccar2=countsiccar2+ctsiccar2;
if sicc02[ini]<x[ini] then ctsiccma2=1;
else ctsiccma2=0;
countsiccma2=countsiccma2+ctsiccma2;
if sicc21[ini]<po[ini] then ctsiccarma21=1;
else ctsiccarma21=0;
countsiccarma21=countsiccarma21+ctsiccarma21;
if sicc30[ini]<pc[ini] then ctsiccar3=1;
else ctsiccar3=0;
countsiccar3=countsiccar3+ctsiccar3;
if sicc03[ini]<pa[ini] then ctsiccma3=1;
else ctsiccma3=0;
countsiccma3=countsiccma3+ctsiccma3;
if sicc22v[ini]<pi[ini] then ctsiccarma22=1;
else ctsiccarma22=0;
countsiccarma22=countsiccarma22+ctsiccarma22;
if sicc40[ini]<ui[ini] then ctsiccar4=1;
else ctsiccar4=0;
countsiccar4=countsiccar4+ctsiccar4;
if sicc04[ini]<mo[ini] then ctsiccma4=1;
else ctsiccma4=0;
countsiccma4=countsiccma4+ctsiccma4;  
end;

create countsiccmco22 var {n countsiccar1 countsiccar2 countsiccar3 countsiccar4 countsiccma1 countsiccma2 countsiccma3 countsiccma4 countsiccarma11 countsiccarma12 countsiccarma21 countsiccarma22};
append;
close;

create countsiccmv22 var {n countsiccar1mv countsiccar2mv countsiccar3mv countsiccar4mv countsiccma1mv countsiccma2mv countsiccma3mv countsiccma4mv countsiccarma11mv countsiccarma12mv countsiccarma21mv countsiccarma22mv};
append;
close;


/*count hq*/
free hq11;
free hq10;
free hq01;
free hq12;
free hq20;
free hq02;
free hq21;
free hq30;
free hq03;
free hq22;
free hq40;
free hq04;
free hq11mv;
free hq10mv;
free hq01mv;
free hq12mv;
free hq20mv;
free hq02mv;
free hq21mv;
free hq30mv;
free hq03mv;
free hq22vmv;
free hq40mv;
free hq04mv;

do o=1 to h*4 by 4;
fr=hqarma[o];
hq11=hq11//fr;
gr=hqar[o];
hq10=hq10//gr;
hr=hqma[o];
hq01=hq01//hr;
end;

do o=1 to h*4 by 4;
frr=hqarmamv[o];
hq11mv=hq11mv//frr;
grr=hqarmv[o];
hq10mv=hq10mv//grr;
hrr=hqmamv[o];
hq01mv=hq01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=hqarma[l];
hq12=hq12//sr;
ar=hqar[l];
hq20=hq20//ar;
zr=hqma[l];
hq02=hq02//zr;
end;

do l=2 to h*4 by 4;
srr=hqarmamv[l];
hq12mv=hq12mv//srr;
arr=hqarmv[l];
hq20mv=hq20mv//arr;
zrr=hqmamv[l];
hq02mv=hq02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=hqarma[t];
hq21=hq21//mr;
rr=hqar[t];
hq30=hq30//rr;
kr=hqma[t];
hq03=hq03//kr;
end;


do t=3 to h*4 by 4;
mrr=hqarmamv[t];
hq21mv=hq21mv//mrr;
rrr=hqarmv[t];
hq30mv=hq30mv//rrr;
krr=hqmamv[t];
hq03mv=hq03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=hqarma[g];
hq22v=hq22v//jvraie;
dr=hqar[g];
hq40=hq40//dr;
br=hqma[g];
hq04=hq04//br;
end;

do g=4 to h*4 by 4;
jvraier=hqarmamv[g];
hq22vmv=hq22vmv//jvraier;
drr=hqarmv[g];
hq40mv=hq40mv//drr;
brr=hqmamv[g];
hq04mv=hq04mv//brr;
end;


counthqar1=0;
counthqar2=0;
counthqar3=0;
counthqar4=0;
counthqma1=0;
counthqma2=0;
counthqma3=0;
counthqma4=0;
counthqarma11=0;
counthqarma12=0;
counthqarma21=0;
counthqarma22=0;
counthqar1mv=0;
counthqar2mv=0;
counthqar3mv=0;
counthqar4mv=0;
counthqma1mv=0;
counthqma2mv=0;
counthqma3mv=0;
counthqma4mv=0;
counthqarma11mv=0;
counthqarma12mv=0;
counthqarma21mv=0;
counthqarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(hq04);
cmv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
dmv[ini]=min(hq11mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
emv[ini]=min(hq10mv[ini],hq11mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
qmv[ini]=min(hq10mv[ini],hq01mv[ini],hq11mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
imv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq11mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
xmv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq11mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
pomv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq11mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
pcmv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq11mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
pamv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq11mv[ini],hq22vmv[ini],hq40mv[ini],hq04mv[ini]);
pimv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq11mv[ini],hq40mv[ini],hq04mv[ini]);
uimv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq11mv[ini],hq04mv[ini]);
momv[ini]=min(hq10mv[ini],hq01mv[ini],hq12mv[ini],hq20mv[ini],hq02mv[ini],hq21mv[ini],hq30mv[ini],hq03mv[ini],hq22vmv[ini],hq40mv[ini],hq11mv[ini]);
if hq11mv[ini]<cmv[ini] then cthqarma11mv=1;
else cthqarma11mv=0;
counthqarma11mv=counthqarma11mv+cthqarma11mv;
if hq10mv[ini]<dmv[ini] then cthqar1mv=1;
else cthqar1mv=0;
counthqar1mv=counthqar1mv+cthqar1mv;
if hq01mv[ini]<emv[ini] then cthqma1mv=1;
else cthqma1mv=0;
counthqma1mv=counthqma1mv+cthqma1mv;
if hq12mv[ini]<qmv[ini] then cthqarma12mv=1;
else cthqarma12mv=0;
counthqarma12mv=counthqarma12mv+cthqarma12mv=1;
if hq20mv[ini]<imv[ini] then cthqar2mv=1;
else cthqar2mv=0;
counthqar2mv=counthqar2mv+cthqar2mv;
if hq02mv[ini]<xmv[ini] then cthqma2mv=1;
else cthqma2mv=0;
counthqma2mv=counthqma2mv+cthqma2mv;
if hq21mv[ini]<pomv[ini] then cthqarma21mv=1;
else cthqarma21mv=0;
counthqarma21mv=counthqarma21mv+cthqarma21mv;
if hq30mv[ini]<pcmv[ini] then cthqar3mv=1;
else cthqar3mv=0;
counthqar3mv=counthqar3mv+cthqar3mv;
if hq03mv[ini]<pamv[ini] then cthqma3mv=1;
else cthqma3mv=0;
counthqma3mv=counthqma3mv+cthqma3mv;
if hq22vmv[ini]<pimv[ini] then cthqarma22mv=1;
else cthqarma22mv=0;
counthqarma22mv=counthqarma22mv+cthqarma22mv;
if hq40mv[ini]<uimv[ini] then cthqar4mv=1;
else cthqar4mv=0;
counthqar4mv=counthqar4mv+cthqar4mv;
if hq04mv[ini]<momv[ini] then cthqma4mv=1;
else cthqma4mv=0;
counthqma4mv=counthqma4mv+cthqma4mv; 
end;

do ini=1 to nrow(hq04);
c[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
d[ini]=min(hq11[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
e[ini]=min(hq10[ini],hq11[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
q[ini]=min(hq10[ini],hq01[ini],hq11[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
i[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq11[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
x[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq11[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
po[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq11[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
pc[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq11[ini],hq03[ini],hq22v[ini],hq40[ini],hq04[ini]);
pa[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq11[ini],hq22v[ini],hq40[ini],hq04[ini]);
pi[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq11[ini],hq40[ini],hq04[ini]);
ui[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq11[ini],hq04[ini]);
mo[ini]=min(hq10[ini],hq01[ini],hq12[ini],hq20[ini],hq02[ini],hq21[ini],hq30[ini],hq03[ini],hq22v[ini],hq40[ini],hq11[ini]);
if hq11[ini]<c[ini] then cthqarma11=1;
else cthqarma11=0;
counthqarma11=counthqarma11+cthqarma11;
if hq10[ini]<d[ini] then cthqar1=1;
else cthqar1=0;
counthqar1=counthqar1+cthqar1;
if hq01[ini]<e[ini] then cthqma1=1;
else cthqma1=0;
counthqma1=counthqma1+cthqma1;
if hq12[ini]<q[ini] then cthqarma12=1;
else cthqarma12=0;
counthqarma12=counthqarma12+cthqarma12=1;
if hq20[ini]<i[ini] then cthqar2=1;
else cthqar2=0;
counthqar2=counthqar2+cthqar2;
if hq02[ini]<x[ini] then cthqma2=1;
else cthqma2=0;
counthqma2=counthqma2+cthqma2;
if hq21[ini]<po[ini] then cthqarma21=1;
else cthqarma21=0;
counthqarma21=counthqarma21+cthqarma21;
if hq30[ini]<pc[ini] then cthqar3=1;
else cthqar3=0;
counthqar3=counthqar3+cthqar3;
if hq03[ini]<pa[ini] then cthqma3=1;
else cthqma3=0;
counthqma3=counthqma3+cthqma3;
if hq22v[ini]<pi[ini] then cthqarma22=1;
else cthqarma22=0;
counthqarma22=counthqarma22+cthqarma22;
if hq40[ini]<ui[ini] then cthqar4=1;
else cthqar4=0;
counthqar4=counthqar4+cthqar4;
if hq04[ini]<mo[ini] then cthqma4=1;
else cthqma4=0;
counthqma4=counthqma4+cthqma4;  
end;

create counthqmco22 var {n counthqar1 counthqar2 counthqar3 counthqar4 counthqma1 counthqma2 counthqma3 counthqma4 counthqarma11 counthqarma12 counthqarma21 counthqarma22};
append;
close;

create counthqmv22 var {n counthqar1mv counthqar2mv counthqar3mv counthqar4mv counthqma1mv counthqma2mv counthqma3mv counthqma4mv counthqarma11mv counthqarma12mv counthqarma21mv counthqarma22mv};
append;
close;



/*count fpe*/
free fpe11;
free fpe10;
free fpe01;
free fpe12;
free fpe20;
free fpe02;
free fpe21;
free fpe30;
free fpe03;
free fpe22;
free fpe40;
free fpe04;
free fpe11mv;
free fpe10mv;
free fpe01mv;
free fpe12mv;
free fpe20mv;
free fpe02mv;
free fpe21mv;
free fpe30mv;
free fpe03mv;
free fpe22vmv;
free fpe40mv;
free fpe04mv;

do o=1 to h*4 by 4;
fr=fpearma[o];
fpe11=fpe11//fr;
gr=fpear[o];
fpe10=fpe10//gr;
hr=fpema[o];
fpe01=fpe01//hr;
end;

do o=1 to h*4 by 4;
frr=fpearmamv[o];
fpe11mv=fpe11mv//frr;
grr=fpearmv[o];
fpe10mv=fpe10mv//grr;
hrr=fpemamv[o];
fpe01mv=fpe01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=fpearma[l];
fpe12=fpe12//sr;
ar=fpear[l];
fpe20=fpe20//ar;
zr=fpema[l];
fpe02=fpe02//zr;
end;

do l=2 to h*4 by 4;
srr=fpearmamv[l];
fpe12mv=fpe12mv//srr;
arr=fpearmv[l];
fpe20mv=fpe20mv//arr;
zrr=fpemamv[l];
fpe02mv=fpe02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=fpearma[t];
fpe21=fpe21//mr;
rr=fpear[t];
fpe30=fpe30//rr;
kr=fpema[t];
fpe03=fpe03//kr;
end;


do t=3 to h*4 by 4;
mrr=fpearmamv[t];
fpe21mv=fpe21mv//mrr;
rrr=fpearmv[t];
fpe30mv=fpe30mv//rrr;
krr=fpemamv[t];
fpe03mv=fpe03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=fpearma[g];
fpe22v=fpe22v//jvraie;
dr=fpear[g];
fpe40=fpe40//dr;
br=fpema[g];
fpe04=fpe04//br;
end;

do g=4 to h*4 by 4;
jvraier=fpearmamv[g];
fpe22vmv=fpe22vmv//jvraier;
drr=fpearmv[g];
fpe40mv=fpe40mv//drr;
brr=fpemamv[g];
fpe04mv=fpe04mv//brr;
end;


countfpear1=0;
countfpear2=0;
countfpear3=0;
countfpear4=0;
countfpema1=0;
countfpema2=0;
countfpema3=0;
countfpema4=0;
countfpearma11=0;
countfpearma12=0;
countfpearma21=0;
countfpearma22=0;
countfpear1mv=0;
countfpear2mv=0;
countfpear3mv=0;
countfpear4mv=0;
countfpema1mv=0;
countfpema2mv=0;
countfpema3mv=0;
countfpema4mv=0;
countfpearma11mv=0;
countfpearma12mv=0;
countfpearma21mv=0;
countfpearma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(fpe04);
cmv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
dmv[ini]=min(fpe11mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
emv[ini]=min(fpe10mv[ini],fpe11mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
qmv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe11mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
imv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe11mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
xmv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe11mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
pomv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe11mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
pcmv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe11mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
pamv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe11mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe04mv[ini]);
pimv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe11mv[ini],fpe40mv[ini],fpe04mv[ini]);
uimv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe11mv[ini],fpe04mv[ini]);
momv[ini]=min(fpe10mv[ini],fpe01mv[ini],fpe12mv[ini],fpe20mv[ini],fpe02mv[ini],fpe21mv[ini],fpe30mv[ini],fpe03mv[ini],fpe22vmv[ini],fpe40mv[ini],fpe11mv[ini]);
if fpe11mv[ini]<cmv[ini] then ctfpearma11mv=1;
else ctfpearma11mv=0;
countfpearma11mv=countfpearma11mv+ctfpearma11mv;
if fpe10mv[ini]<dmv[ini] then ctfpear1mv=1;
else ctfpear1mv=0;
countfpear1mv=countfpear1mv+ctfpear1mv;
if fpe01mv[ini]<emv[ini] then ctfpema1mv=1;
else ctfpema1mv=0;
countfpema1mv=countfpema1mv+ctfpema1mv;
if fpe12mv[ini]<qmv[ini] then ctfpearma12mv=1;
else ctfpearma12mv=0;
countfpearma12mv=countfpearma12mv+ctfpearma12mv=1;
if fpe20mv[ini]<imv[ini] then ctfpear2mv=1;
else ctfpear2mv=0;
countfpear2mv=countfpear2mv+ctfpear2mv;
if fpe02mv[ini]<xmv[ini] then ctfpema2mv=1;
else ctfpema2mv=0;
countfpema2mv=countfpema2mv+ctfpema2mv;
if fpe21mv[ini]<pomv[ini] then ctfpearma21mv=1;
else ctfpearma21mv=0;
countfpearma21mv=countfpearma21mv+ctfpearma21mv;
if fpe30mv[ini]<pcmv[ini] then ctfpear3mv=1;
else ctfpear3mv=0;
countfpear3mv=countfpear3mv+ctfpear3mv;
if fpe03mv[ini]<pamv[ini] then ctfpema3mv=1;
else ctfpema3mv=0;
countfpema3mv=countfpema3mv+ctfpema3mv;
if fpe22vmv[ini]<pimv[ini] then ctfpearma22mv=1;
else ctfpearma22mv=0;
countfpearma22mv=countfpearma22mv+ctfpearma22mv;
if fpe40mv[ini]<uimv[ini] then ctfpear4mv=1;
else ctfpear4mv=0;
countfpear4mv=countfpear4mv+ctfpear4mv;
if fpe04mv[ini]<momv[ini] then ctfpema4mv=1;
else ctfpema4mv=0;
countfpema4mv=countfpema4mv+ctfpema4mv; 
end;

do ini=1 to nrow(fpe04);
c[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
d[ini]=min(fpe11[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
e[ini]=min(fpe10[ini],fpe11[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
q[ini]=min(fpe10[ini],fpe01[ini],fpe11[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
i[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe11[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
x[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe11[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
po[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe11[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
pc[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe11[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
pa[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe11[ini],fpe22v[ini],fpe40[ini],fpe04[ini]);
pi[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe11[ini],fpe40[ini],fpe04[ini]);
ui[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe11[ini],fpe04[ini]);
mo[ini]=min(fpe10[ini],fpe01[ini],fpe12[ini],fpe20[ini],fpe02[ini],fpe21[ini],fpe30[ini],fpe03[ini],fpe22v[ini],fpe40[ini],fpe11[ini]);
if fpe11[ini]<c[ini] then ctfpearma11=1;
else ctfpearma11=0;
countfpearma11=countfpearma11+ctfpearma11;
if fpe10[ini]<d[ini] then ctfpear1=1;
else ctfpear1=0;
countfpear1=countfpear1+ctfpear1;
if fpe01[ini]<e[ini] then ctfpema1=1;
else ctfpema1=0;
countfpema1=countfpema1+ctfpema1;
if fpe12[ini]<q[ini] then ctfpearma12=1;
else ctfpearma12=0;
countfpearma12=countfpearma12+ctfpearma12=1;
if fpe20[ini]<i[ini] then ctfpear2=1;
else ctfpear2=0;
countfpear2=countfpear2+ctfpear2;
if fpe02[ini]<x[ini] then ctfpema2=1;
else ctfpema2=0;
countfpema2=countfpema2+ctfpema2;
if fpe21[ini]<po[ini] then ctfpearma21=1;
else ctfpearma21=0;
countfpearma21=countfpearma21+ctfpearma21;
if fpe30[ini]<pc[ini] then ctfpear3=1;
else ctfpear3=0;
countfpear3=countfpear3+ctfpear3;
if fpe03[ini]<pa[ini] then ctfpema3=1;
else ctfpema3=0;
countfpema3=countfpema3+ctfpema3;
if fpe22v[ini]<pi[ini] then ctfpearma22=1;
else ctfpearma22=0;
countfpearma22=countfpearma22+ctfpearma22;
if fpe40[ini]<ui[ini] then ctfpear4=1;
else ctfpear4=0;
countfpear4=countfpear4+ctfpear4;
if fpe04[ini]<mo[ini] then ctfpema4=1;
else ctfpema4=0;
countfpema4=countfpema4+ctfpema4;  
end;

create countfpemco22 var {n countfpear1 countfpear2 countfpear3 countfpear4 countfpema1 countfpema2 countfpema3 countfpema4 countfpearma11 countfpearma12 countfpearma21 countfpearma22};
append;
close;

create countfpemv22 var {n countfpear1mv countfpear2mv countfpear3mv countfpear4mv countfpema1mv countfpema2mv countfpema3mv countfpema4mv countfpearma11mv countfpearma12mv countfpearma21mv countfpearma22mv};
append;
close;

/*count bic*/
free bic11;
free bic10;
free bic01;
free bic12;
free bic20;
free bic02;
free bic21;
free bic30;
free bic03;
free bic22;
free bic40;
free bic04;
free bic11mv;
free bic10mv;
free bic01mv;
free bic12mv;
free bic20mv;
free bic02mv;
free bic21mv;
free bic30mv;
free bic03mv;
free bic22vmv;
free bic40mv;
free bic04mv;

do o=1 to h*4 by 4;
fr=bicarma[o];
bic11=bic11//fr;
gr=bicar[o];
bic10=bic10//gr;
hr=bicma[o];
bic01=bic01//hr;
end;

do o=1 to h*4 by 4;
frr=bicarmamv[o];
bic11mv=bic11mv//frr;
grr=bicarmv[o];
bic10mv=bic10mv//grr;
hrr=bicmamv[o];
bic01mv=bic01mv//hrr;
end;


do l=2 to h*4 by 4;
sr=bicarma[l];
bic12=bic12//sr;
ar=bicar[l];
bic20=bic20//ar;
zr=bicma[l];
bic02=bic02//zr;
end;

do l=2 to h*4 by 4;
srr=bicarmamv[l];
bic12mv=bic12mv//srr;
arr=bicarmv[l];
bic20mv=bic20mv//arr;
zrr=bicmamv[l];
bic02mv=bic02mv//zrr;
end;


do t=3 to h*4 by 4;
mr=bicarma[t];
bic21=bic21//mr;
rr=bicar[t];
bic30=bic30//rr;
kr=bicma[t];
bic03=bic03//kr;
end;


do t=3 to h*4 by 4;
mrr=bicarmamv[t];
bic21mv=bic21mv//mrr;
rrr=bicarmv[t];
bic30mv=bic30mv//rrr;
krr=bicmamv[t];
bic03mv=bic03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=bicarma[g];
bic22v=bic22v//jvraie;
dr=bicar[g];
bic40=bic40//dr;
br=bicma[g];
bic04=bic04//br;
end;

do g=4 to h*4 by 4;
jvraier=bicarmamv[g];
bic22vmv=bic22vmv//jvraier;
drr=bicarmv[g];
bic40mv=bic40mv//drr;
brr=bicmamv[g];
bic04mv=bic04mv//brr;
end;


countbicar1=0;
countbicar2=0;
countbicar3=0;
countbicar4=0;
countbicma1=0;
countbicma2=0;
countbicma3=0;
countbicma4=0;
countbicarma11=0;
countbicarma12=0;
countbicarma21=0;
countbicarma22=0;
countbicar1mv=0;
countbicar2mv=0;
countbicar3mv=0;
countbicar4mv=0;
countbicma1mv=0;
countbicma2mv=0;
countbicma3mv=0;
countbicma4mv=0;
countbicarma11mv=0;
countbicarma12mv=0;
countbicarma21mv=0;
countbicarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(bic04);
cmv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
dmv[ini]=min(bic11mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
emv[ini]=min(bic10mv[ini],bic11mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
qmv[ini]=min(bic10mv[ini],bic01mv[ini],bic11mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
imv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic11mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
xmv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic11mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
pomv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic11mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
pcmv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic11mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
pamv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic11mv[ini],bic22vmv[ini],bic40mv[ini],bic04mv[ini]);
pimv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic11mv[ini],bic40mv[ini],bic04mv[ini]);
uimv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic11mv[ini],bic04mv[ini]);
momv[ini]=min(bic10mv[ini],bic01mv[ini],bic12mv[ini],bic20mv[ini],bic02mv[ini],bic21mv[ini],bic30mv[ini],bic03mv[ini],bic22vmv[ini],bic40mv[ini],bic11mv[ini]);
if bic11mv[ini]<cmv[ini] then ctbicarma11mv=1;
else ctbicarma11mv=0;
countbicarma11mv=countbicarma11mv+ctbicarma11mv;
if bic10mv[ini]<dmv[ini] then ctbicar1mv=1;
else ctbicar1mv=0;
countbicar1mv=countbicar1mv+ctbicar1mv;
if bic01mv[ini]<emv[ini] then ctbicma1mv=1;
else ctbicma1mv=0;
countbicma1mv=countbicma1mv+ctbicma1mv;
if bic12mv[ini]<qmv[ini] then ctbicarma12mv=1;
else ctbicarma12mv=0;
countbicarma12mv=countbicarma12mv+ctbicarma12mv=1;
if bic20mv[ini]<imv[ini] then ctbicar2mv=1;
else ctbicar2mv=0;
countbicar2mv=countbicar2mv+ctbicar2mv;
if bic02mv[ini]<xmv[ini] then ctbicma2mv=1;
else ctbicma2mv=0;
countbicma2mv=countbicma2mv+ctbicma2mv;
if bic21mv[ini]<pomv[ini] then ctbicarma21mv=1;
else ctbicarma21mv=0;
countbicarma21mv=countbicarma21mv+ctbicarma21mv;
if bic30mv[ini]<pcmv[ini] then ctbicar3mv=1;
else ctbicar3mv=0;
countbicar3mv=countbicar3mv+ctbicar3mv;
if bic03mv[ini]<pamv[ini] then ctbicma3mv=1;
else ctbicma3mv=0;
countbicma3mv=countbicma3mv+ctbicma3mv;
if bic22vmv[ini]<pimv[ini] then ctbicarma22mv=1;
else ctbicarma22mv=0;
countbicarma22mv=countbicarma22mv+ctbicarma22mv;
if bic40mv[ini]<uimv[ini] then ctbicar4mv=1;
else ctbicar4mv=0;
countbicar4mv=countbicar4mv+ctbicar4mv;
if bic04mv[ini]<momv[ini] then ctbicma4mv=1;
else ctbicma4mv=0;
countbicma4mv=countbicma4mv+ctbicma4mv; 
end;

do ini=1 to nrow(bic04);
c[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
d[ini]=min(bic11[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
e[ini]=min(bic10[ini],bic11[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
q[ini]=min(bic10[ini],bic01[ini],bic11[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
i[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic11[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
x[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic11[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
po[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic11[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
pc[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic11[ini],bic03[ini],bic22v[ini],bic40[ini],bic04[ini]);
pa[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic11[ini],bic22v[ini],bic40[ini],bic04[ini]);
pi[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic11[ini],bic40[ini],bic04[ini]);
ui[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic11[ini],bic04[ini]);
mo[ini]=min(bic10[ini],bic01[ini],bic12[ini],bic20[ini],bic02[ini],bic21[ini],bic30[ini],bic03[ini],bic22v[ini],bic40[ini],bic11[ini]);
if bic11[ini]<c[ini] then ctbicarma11=1;
else ctbicarma11=0;
countbicarma11=countbicarma11+ctbicarma11;
if bic10[ini]<d[ini] then ctbicar1=1;
else ctbicar1=0;
countbicar1=countbicar1+ctbicar1;
if bic01[ini]<e[ini] then ctbicma1=1;
else ctbicma1=0;
countbicma1=countbicma1+ctbicma1;
if bic12[ini]<q[ini] then ctbicarma12=1;
else ctbicarma12=0;
countbicarma12=countbicarma12+ctbicarma12=1;
if bic20[ini]<i[ini] then ctbicar2=1;
else ctbicar2=0;
countbicar2=countbicar2+ctbicar2;
if bic02[ini]<x[ini] then ctbicma2=1;
else ctbicma2=0;
countbicma2=countbicma2+ctbicma2;
if bic21[ini]<po[ini] then ctbicarma21=1;
else ctbicarma21=0;
countbicarma21=countbicarma21+ctbicarma21;
if bic30[ini]<pc[ini] then ctbicar3=1;
else ctbicar3=0;
countbicar3=countbicar3+ctbicar3;
if bic03[ini]<pa[ini] then ctbicma3=1;
else ctbicma3=0;
countbicma3=countbicma3+ctbicma3;
if bic22v[ini]<pi[ini] then ctbicarma22=1;
else ctbicarma22=0;
countbicarma22=countbicarma22+ctbicarma22;
if bic40[ini]<ui[ini] then ctbicar4=1;
else ctbicar4=0;
countbicar4=countbicar4+ctbicar4;
if bic04[ini]<mo[ini] then ctbicma4=1;
else ctbicma4=0;
countbicma4=countbicma4+ctbicma4;  
end;

create countbicmco22 var {n countbicar1 countbicar2 countbicar3 countbicar4 countbicma1 countbicma2 countbicma3 countbicma4 countbicarma11 countbicarma12 countbicarma21 countbicarma22};
append;
close;

create countbicmv22 var {n countbicar1mv countbicar2mv countbicar3mv countbicar4mv countbicma1mv countbicma2mv countbicma3mv countbicma4mv countbicarma11mv countbicarma12mv countbicarma21mv countbicarma22mv};
append;
close;

/*count aicu*/
free aicu11;
free aicu10;
free aicu01;
free aicu12;
free aicu20;
free aicu02;
free aicu21;
free aicu30;
free aicu03;
free aicu22;
free aicu40;
free aicu04;
free aicu11mv;
free aicu10mv;
free aicu01mv;
free aicu12mv;
free aicu20mv;
free aicu02mv;
free aicu21mv;
free aicu30mv;
free aicu03mv;
free aicu22vmv;
free aicu40mv;
free aicu04mv;

do o=1 to h*4 by 4;
fr=aicuarma[o];
aicu11=aicu11//fr;
gr=aicuar[o];
aicu10=aicu10//gr;
hr=aicuma[o];
aicu01=aicu01//hr;
end;

do o=1 to h*4 by 4;
frr=aicuarmamv[o];
aicu11mv=aicu11mv//frr;
grr=aicuarmv[o];
aicu10mv=aicu10mv//grr;
hrr=aicumamv[o];
aicu01mv=aicu01mv//hrr;
end;

do l=2 to h*4 by 4;
sr=aicuarma[l];
aicu12=aicu12//sr;
ar=aicuar[l];
aicu20=aicu20//ar;
zr=aicuma[l];
aicu02=aicu02//zr;
end;

do l=2 to h*4 by 4;
srr=aicuarmamv[l];
aicu12mv=aicu12mv//srr;
arr=aicuarmv[l];
aicu20mv=aicu20mv//arr;
zrr=aicumamv[l];
aicu02mv=aicu02mv//zrr;
end;

do t=3 to h*4 by 4;
mr=aicuarma[t];
aicu21=aicu21//mr;
rr=aicuar[t];
aicu30=aicu30//rr;
kr=aicuma[t];
aicu03=aicu03//kr;
end;


do t=3 to h*4 by 4;
mrr=aicuarmamv[t];
aicu21mv=aicu21mv//mrr;
rrr=aicuarmv[t];
aicu30mv=aicu30mv//rrr;
krr=aicumamv[t];
aicu03mv=aicu03mv//krr;
end;

do g=4 to h*4 by 4;
jvraie=aicuarma[g];
aicu22v=aicu22v//jvraie;
dr=aicuar[g];
aicu40=aicu40//dr;
br=aicuma[g];
aicu04=aicu04//br;
end;

do g=4 to h*4 by 4;
jvraier=aicuarmamv[g];
aicu22vmv=aicu22vmv//jvraier;
drr=aicuarmv[g];
aicu40mv=aicu40mv//drr;
brr=aicumamv[g];
aicu04mv=aicu04mv//brr;
end;


countaicuar1=0;
countaicuar2=0;
countaicuar3=0;
countaicuar4=0;
countaicuma1=0;
countaicuma2=0;
countaicuma3=0;
countaicuma4=0;
countaicuarma11=0;
countaicuarma12=0;
countaicuarma21=0;
countaicuarma22=0;
countaicuar1mv=0;
countaicuar2mv=0;
countaicuar3mv=0;
countaicuar4mv=0;
countaicuma1mv=0;
countaicuma2mv=0;
countaicuma3mv=0;
countaicuma4mv=0;
countaicuarma11mv=0;
countaicuarma12mv=0;
countaicuarma21mv=0;
countaicuarma22mv=0;
c=j(h,1,0);
d=j(h,1,0);
e=j(h,1,0);
q=j(h,1,0);
i=j(h,1,0);
x=j(h,1,0);
po=j(h,1,0);
pc=j(h,1,0);
pa=j(h,1,0);
pi=j(h,1,0);
ui=j(h,1,0);
mo=j(h,1,0);
cmv=j(h,1,0);
dmv=j(h,1,0);
emv=j(h,1,0);
qmv=j(h,1,0);
imv=j(h,1,0);
xmv=j(h,1,0);
pomv=j(h,1,0);
pcmv=j(h,1,0);
pamv=j(h,1,0);
pimv=j(h,1,0);
uimv=j(h,1,0);
momv=j(h,1,0);

do ini=1 to nrow(aicu04mv);
cmv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
dmv[ini]=min(aicu11mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
emv[ini]=min(aicu10mv[ini],aicu11mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
qmv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu11mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
imv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu11mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
xmv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu11mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
pomv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu11mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
pcmv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu11mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
pamv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu11mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu04mv[ini]);
pimv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu11mv[ini],aicu40mv[ini],aicu04mv[ini]);
uimv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu11mv[ini],aicu04mv[ini]);
momv[ini]=min(aicu10mv[ini],aicu01mv[ini],aicu12mv[ini],aicu20mv[ini],aicu02mv[ini],aicu21mv[ini],aicu30mv[ini],aicu03mv[ini],aicu22vmv[ini],aicu40mv[ini],aicu11mv[ini]);
if aicu11mv[ini]<cmv[ini] then ctaicuarma11mv=1;
else ctaicuarma11mv=0;
countaicuarma11mv=countaicuarma11mv+ctaicuarma11mv;
if aicu10mv[ini]<dmv[ini] then ctaicuar1mv=1;
else ctaicuar1mv=0;
countaicuar1mv=countaicuar1mv+ctaicuar1mv;
if aicu01mv[ini]<emv[ini] then ctaicuma1mv=1;
else ctaicuma1mv=0;
countaicuma1mv=countaicuma1mv+ctaicuma1mv;
if aicu12mv[ini]<qmv[ini] then ctaicuarma12mv=1;
else ctaicuarma12mv=0;
countaicuarma12mv=countaicuarma12mv+ctaicuarma12mv=1;
if aicu20mv[ini]<imv[ini] then ctaicuar2mv=1;
else ctaicuar2mv=0;
countaicuar2mv=countaicuar2mv+ctaicuar2mv;
if aicu02mv[ini]<xmv[ini] then ctaicuma2mv=1;
else ctaicuma2mv=0;
countaicuma2mv=countaicuma2mv+ctaicuma2mv;
if aicu21mv[ini]<pomv[ini] then ctaicuarma21mv=1;
else ctaicuarma21mv=0;
countaicuarma21mv=countaicuarma21mv+ctaicuarma21mv;
if aicu30mv[ini]<pcmv[ini] then ctaicuar3mv=1;
else ctaicuar3mv=0;
countaicuar3mv=countaicuar3mv+ctaicuar3mv;
if aicu03mv[ini]<pamv[ini] then ctaicuma3mv=1;
else ctaicuma3mv=0;
countaicuma3mv=countaicuma3mv+ctaicuma3mv;
if aicu22vmv[ini]<pimv[ini] then ctaicuarma22mv=1;
else ctaicuarma22mv=0;
countaicuarma22mv=countaicuarma22mv+ctaicuarma22mv;
if aicu40mv[ini]<uimv[ini] then ctaicuar4mv=1;
else ctaicuar4mv=0;
countaicuar4mv=countaicuar4mv+ctaicuar4mv;
if aicu04mv[ini]<momv[ini] then ctaicuma4mv=1;
else ctaicuma4mv=0;
countaicuma4mv=countaicuma4mv+ctaicuma4mv; 
end;

do ini=1 to nrow(aicu04);
c[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
d[ini]=min(aicu11[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
e[ini]=min(aicu10[ini],aicu11[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
q[ini]=min(aicu10[ini],aicu01[ini],aicu11[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
i[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu11[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
x[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu11[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
po[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu11[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
pc[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu11[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
pa[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu11[ini],aicu22v[ini],aicu40[ini],aicu04[ini]);
pi[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu11[ini],aicu40[ini],aicu04[ini]);
ui[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu11[ini],aicu04[ini]);
mo[ini]=min(aicu10[ini],aicu01[ini],aicu12[ini],aicu20[ini],aicu02[ini],aicu21[ini],aicu30[ini],aicu03[ini],aicu22v[ini],aicu40[ini],aicu11[ini]);
if aicu11[ini]<c[ini] then ctaicuarma11=1;
else ctaicuarma11=0;
countaicuarma11=countaicuarma11+ctaicuarma11;
if aicu10[ini]<d[ini] then ctaicuar1=1;
else ctaicuar1=0;
countaicuar1=countaicuar1+ctaicuar1;
if aicu01[ini]<e[ini] then ctaicuma1=1;
else ctaicuma1=0;
countaicuma1=countaicuma1+ctaicuma1;
if aicu12[ini]<q[ini] then ctaicuarma12=1;
else ctaicuarma12=0;
countaicuarma12=countaicuarma12+ctaicuarma12=1;
if aicu20[ini]<i[ini] then ctaicuar2=1;
else ctaicuar2=0;
countaicuar2=countaicuar2+ctaicuar2;
if aicu02[ini]<x[ini] then ctaicuma2=1;
else ctaicuma2=0;
countaicuma2=countaicuma2+ctaicuma2;
if aicu21[ini]<po[ini] then ctaicuarma21=1;
else ctaicuarma21=0;
countaicuarma21=countaicuarma21+ctaicuarma21;
if aicu30[ini]<pc[ini] then ctaicuar3=1;
else ctaicuar3=0;
countaicuar3=countaicuar3+ctaicuar3;
if aicu03[ini]<pa[ini] then ctaicuma3=1;
else ctaicuma3=0;
countaicuma3=countaicuma3+ctaicuma3;
if aicu22v[ini]<pi[ini] then ctaicuarma22=1;
else ctaicuarma22=0;
countaicuarma22=countaicuarma22+ctaicuarma22;
if aicu40[ini]<ui[ini] then ctaicuar4=1;
else ctaicuar4=0;
countaicuar4=countaicuar4+ctaicuar4;
if aicu04[ini]<mo[ini] then ctaicuma4=1;
else ctaicuma4=0;
countaicuma4=countaicuma4+ctaicuma4;  
end;

create countaicumco22 var {n countaicuar1 countaicuar2 countaicuar3 countaicuar4 countaicuma1 countaicuma2 countaicuma3 countaicuma4 countaicuarma11 countaicuarma12 countaicuarma21 countaicuarma22};
append;
close;

create countaicumv22 var {n countaicuar1mv countaicuar2mv countaicuar3mv countaicuar4mv countaicuma1mv countaicuma2mv countaicuma3mv countaicuma4mv countaicuarma11mv countaicuarma12mv countaicuarma21mv countaicuarma22mv};
append;
close;

